/*
 * Created on Feb 7, 2005
 *
 * TODO To change the template for this generated file go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
package net.clackrouter.application;

import java.net.InetAddress;
import java.net.URL;
import java.net.URLConnection;
import java.nio.ByteBuffer;



/**
 * A Clack application that acts as a VERY simple webserver
 */
public class MiniWebServer extends ClackApplication {
		
		public void application_main(String args[]) {
		
			try {
				InetAddress localAddr = getRouter().getInputInterfaces()[0].getIPAddress();
				if(args.length > 1)
					localAddr = InetAddress.getByName(args[1]);
				
				// create web content
				TCPSocket socket = null;
				try {
					socket = createTCPSocket();
				}catch (Exception e){
					e.printStackTrace();
					this.alert("Error, router '" + getRouter().getHost() + "' does not have a TCP stack");
					return;
				}
				
				int topo = -1;
				try {
					topo = socket.getRouter().getTopology();
				}catch (Exception e){
					e.printStackTrace();
				}
				
				ByteBuffer page = ByteBuffer.wrap((new String(
							"<html><h1> Hello from '" + getRouter().getHost() + "'! </h1><p> Click <a href=\"clack.jpg\">here</a> to download an image </p><p> This message generated by the Clack (tm) mini-webserver on topology "
									+ topo + ".</p></html>\r\n\r\n")).getBytes());
				

				URL url = this.getClass().getResource("/webserver/clack.JPG");
				URLConnection conn = url.openConnection();
				int length = conn.getContentLength();
				byte[] image_arr = new byte[length];	
				ByteBuffer img_header_buf = ByteBuffer.wrap((new String("HTTP/1.0 200 OK\r\nContent-Type: image/jpeg\r\nContent-Length: " + length + "\r\n\r\n").getBytes()));
				ByteBuffer txt_header_buf = ByteBuffer.wrap((new String("HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n").getBytes()));
				ByteBuffer error_header_buf = ByteBuffer.wrap((new String("HTTP/1.0 404 NOT FOUND\r\n\r\n").getBytes()));
				


				//InputStream stream =  .openStream();
				int numRead = conn.getInputStream().read(image_arr);
				//int numRead = channel.read(image_buf);
			    print("Read file of " + numRead + " bytes\n");
			    ByteBuffer image_buf = ByteBuffer.wrap(image_arr);
			    
			    
			    // prepare to serve content
			    
				socket.bind(localAddr, 80);
				socket.listen();

				while (true) {
					print("MiniWebServer is listening on port 80 of "	+ localAddr + "\n");
					TCPSocket clientSocket = socket.accept(); // blocks until connection is received
					
					print("MiniWebServer received a connection! \n");
					ByteBuffer request_buf = ByteBuffer.allocate(0);
					while(request_buf.capacity() == 0)
						request_buf = clientSocket.recv(2000, 2000);
					
					String request_str = new String(request_buf.array());
					print("MiniWebServer received:\n'" + request_str + "'\n");
					String[] tokens = request_str.split(" ");
					if(tokens[1].equals("/")){
						clientSocket.send(txt_header_buf);
						clientSocket.send(page);
					}else if(tokens[1].equals("/clack.jpg")){
						clientSocket.send(img_header_buf);
						clientSocket.send(image_buf);
					}else {
						clientSocket.send(error_header_buf);
					}
					clientSocket.close();
				}
			}catch (Exception e){	e.printStackTrace();	}
		}
		
		 public String getDescription() { return "very simple local webserver"; }

}
